# -*- coding: utf-8 -*-
"""Sentimental Analysis DL Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qEVWZ06ktZejJdQ0_b4oA4Mhf21dDhGJ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from transformers import BertTokenizer, TFBertModel
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import tensorflow as tf
from tensorflow import keras

train_data = pd.read_csv('/content/twitter_training.csv')
valid_data = pd.read_csv('/content/twitter_validation.csv')

x_train = train_data.iloc[:, -1]
y_train = train_data.iloc[:, 2]

x_valid = valid_data.iloc[:, -1]
y_valid = valid_data.iloc[:, 2]

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

x_train = x_train.astype(str)
x_valid = x_valid.astype(str)

x_train_encoded = tokenizer(x_train.tolist(), padding=True, truncation=True, return_tensors = 'tf')
x_valid_encoded = tokenizer(x_valid.tolist(), padding=True, truncation=True, return_tensors = 'tf')

label_encoder = LabelEncoder()
y_train_encoded = LabelEncoder().fit_transform(y_train)
y_valid_encoded = LabelEncoder().fit_transform(y_valid)

#Model Definition: BERT-based Sentiment Analysis Model
class SentimentModel(tf.keras.Model):
  def __init__(self):
    super(SentimentModel, self).__init__()
    self.bert = TFBertModel.from_pretrained('bert-base-uncased')
    self.dense = tf.keras.layers.Dense(1, activation = 'sigmoid')

  def call(self, inputs):
    outputs = self.bert(inputs)
    return self.dense(outputs[1])

# Initialize model
model = SentimentModel()
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
# train the model
history = model.fit(
    x_train_encoded['input_ids'], y_train_encoded, validation_data = (x_valid_encoded['input_ids'], y_valid_encoded), epochs = 3, batch_size = 32)

# Model Evaluation
# Evaluation
accuracy = model.evaluate(X_valid_encoded['input_ids'], y_valid_encoded)
print(f'Validation Accuracy: {accuracy[1] * 100:.2f}%')

# Save the model
model.save('sentiment_model.h5')